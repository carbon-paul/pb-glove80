/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behaviour includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */

#define HYPER(keycode) LS(LC(LA(LG(keycode))))
#define MEH(keycode) LS(LC(LA(keycode)))

/* #define layers */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Colemak 2
#define LAYER_Symbols 3
#define LAYER_Magic 4
#define LAYER_Apps 5

/* #define for key positions */

#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

// NOTE: I removed "C" (POS_LH_C3R4) and "D" (POS_LH_C3R5) from `KEYS_LEFT` so I can still do one-handed CTRL-C and CTRL-D

#define KEYS_LEFT POS_LH_C1R2 POS_LH_C1R3 POS_LH_C1R4 POS_LH_C1R5 POS_LH_C2R1 POS_LH_C2R2 POS_LH_C2R3 POS_LH_C2R4 POS_LH_C2R5 POS_LH_C2R6 POS_LH_C3R1 POS_LH_C3R2 POS_LH_C3R3 POS_LH_C3R6 POS_LH_C4R1 POS_LH_C4R2 POS_LH_C4R3 POS_LH_C4R4 POS_LH_C4R5 POS_LH_C4R6 POS_LH_C5R1 POS_LH_C5R2 POS_LH_C5R3 POS_LH_C5R4 POS_LH_C5R5 POS_LH_C5R6 POS_LH_C6R1 POS_LH_C6R2 POS_LH_C6R3 POS_LH_C6R4 POS_LH_C6R5 POS_LH_C6R6
#define KEYS_RIGHT POS_RH_C1R2 POS_RH_C1R3 POS_RH_C1R4 POS_RH_C1R5 POS_RH_C2R1 POS_RH_C2R2 POS_RH_C2R3 POS_RH_C2R4 POS_RH_C2R5 POS_RH_C2R6 POS_RH_C3R1 POS_RH_C3R2 POS_RH_C3R3 POS_RH_C3R4 POS_RH_C3R5 POS_RH_C3R6 POS_RH_C4R1 POS_RH_C4R2 POS_RH_C4R3 POS_RH_C4R4 POS_RH_C4R5 POS_RH_C4R6 POS_RH_C5R1 POS_RH_C5R2 POS_RH_C5R3 POS_RH_C5R4 POS_RH_C5R5 POS_RH_C5R6 POS_RH_C6R1 POS_RH_C6R2 POS_RH_C6R3 POS_RH_C6R4 POS_RH_C6R5 POS_RH_C6R6
#define THUMBS POS_RH_T1 POS_RH_T2 POS_RH_T3 POS_RH_T4 POS_RH_T5 POS_RH_T6 POS_LH_T1 POS_LH_T2 POS_LH_T3 POS_LH_T4 POS_LH_T5 POS_LH_T6

&lt {
};

/ {
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "REQUIRE_PRIOR_IDLE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_LEFT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_HOLD_TAP_RIGHT";
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
            hold-trigger-on-release;
        };

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <500>;
        };

        hold_temp_layer: hold_temp_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TEMP_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

/* Custom Defined Behaviors */

/ {
    macro_codeblock: macro_codeblock {
        compatible = "zmk,behavior-macro";
        label = "macro_codeblock";
        #binding-cells = <0>;
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp LS(ENTER) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP &kp LS(ENTER)>;
    };

    macro_vimsbb: macro_vim_select_between_brackets {
        compatible = "zmk,behavior-macro";
        label = "macro_vimsbb";
        #binding-cells = <0>;
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LS(N4) &kp H &kp LS(V) &kp PERCENT>;
    };

    macro_tmux_vim: macro_tmux_vim {
        compatible = "zmk,behavior-macro";
        label = "macro_tmux_vim";
        #binding-cells = <0>;
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LG(S) &kp LBKT>;
    };

    mo_rgb: mo_rgb {
        label = "LAYER_MOD";
        compatible = "zmk,behavior-macro";
        wait-ms = <0>;
        tap-ms = <0>;
        #binding-cells = <0>;
        bindings =
            <&macro_press>,
            <&mo 1>,
            <&macro_tap>,
            <&rgb_ug RGB_COLOR_HSB(128,100,100)>,
            <&macro_pause_for_release>,
            <&macro_release>,
            <&mo 1>,
            <&macro_tap>,
            <&rgb_ug RGB_COLOR_HSB(300,100,50)>;
    };
};

/ {
    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        magic_layer {
            bindings = <&magic 1 0>;
            key-positions = <68 65>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        escape-combo {
            bindings = <&kp ESC>;
            key-positions = <35 38>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <37 36>;
        };

        enter-right {
            bindings = <&kp ENTER>;
            key-positions = <42 43>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <60 61>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <38 37>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <42 41>;
        };

        space-left {
            bindings = <&kp LC(LEFT)>;
            key-positions = <24 25>;
            require-prior-idle-ms = <400>;
        };

        space-right {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <25 26>;
            require-prior-idle-ms = <400>;
        };

        tab-prev {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <48 49>;
        };

        tab-next {
            bindings = <&kp LC(TAB)>;
            key-positions = <50 49>;
        };

        delete-word {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <36 37 38>;
        };

        volume-up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <28 29>;
        };

        volume-down {
            bindings = <&kp C_VOL_DN>;
            key-positions = <58 59>;
        };

        play-pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            bindings = <
&trans   &trans           &trans               &trans           &trans                                                                                                                                &trans             &trans           &trans               &trans             &trans
&trans   &kp N1           &kp N2               &kp N3           &kp N4             &kp N5                                                                                        &kp N6               &kp N7             &kp N8           &kp N9               &kp N0             &trans
&trans   &kp Q            &ht LG(W) W          &kp E            &ht LG(R) R        &ht LG(T) T                                                                                   &kp Y                &kp U              &kp I            &kp O                &kp P              &trans
&kp ESC  &hml LEFT_GUI A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_SHIFT F  &ht LC(SPACE) G                                                                               &ht LS(LG(SPACE)) H  &hmr LEFT_SHIFT J  &hmr LEFT_ALT K  &hmr LEFT_CONTROL L  &hmr LEFT_GUI SQT  &trans
&trans   &kp Z            &ht LG(X) X          &ht LG(C) C      &ht LG(V) V        &ht LG(B) B      &caps_word      &trans                &trans  &trans  &trans  &trans         &kp N                &kp M              &kp COMMA        &kp DOT              &kp SLASH          &trans
&trans   &none            &none                &none            &none                               &sk LEFT_SHIFT  &hold_temp_layer 2 2  &to 4   &trans  &sl 3   &qt TAB SPACE                       &none              &none            &none                &none              &trans
            >;
        };

        layer_Magic {
            bindings = <
&to 0        &none            &none            &sys_reset       &bt BT_CLR                                                                                         &bt BT_CLR_ALL   &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none            &none                                                             &none           &none            &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &none  &none  &none  &none
&none        &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none           &none            &none  &none  &none  &none
&bootloader  &none            &none            &none            &none            &bootloader      &bt_2  &bt_3  &none         &none  &none  &none  &bootloader     &none            &none  &none  &none  &bootloader
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none                  &none            &none  &none  &none  &none
            >;
        };

        left {
            bindings = <
&trans  &trans        &trans     &trans         &trans                                                                                  &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans     &trans         &trans         &trans                                                   &trans          &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans     &kp UP_ARROW   &trans         &trans                                                   &kp PERCENT     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp COLON     &trans
&trans  &kp HOME      &kp LEFT   &kp DOWN       &kp RIGHT      &kp END                                                  &kp DOLLAR      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0  &trans
&trans  &kp LG(LEFT)  &kp PG_UP  &kp PAGE_DOWN  &kp LG(RIGHT)  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &kp UNDERSCORE  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PERIOD    &trans
&trans  &trans        &trans     &trans         &trans                  &trans  &trans  &trans  &trans  &trans  &trans                  &trans        &trans        &trans        &trans        &trans
            >;
        };

        right {
            bindings = <
&trans  &trans         &trans            &trans                &trans                                                                                       &trans           &trans        &trans         &trans             &trans
&trans  &trans         &trans            &trans                &trans                 &trans                                                     &trans     &trans           &trans        &trans         &trans             &trans
&trans  &kp SEMICOLON  &kp COLON         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS                                                   &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOUBLE_QUOTES  &trans
&trans  &kp MINUS      &kp UNDERSCORE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL                                                  &kp PIPE   &kp DOLLAR       &kp PERCENT   &kp CARET      &kp QUESTION       &trans
&trans  &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans     &trans  &trans  &trans  &trans  &trans  &trans  &kp GRAVE  &kp AMPERSAND    &kp ASTERISK  &kp BACKSLASH  &kp SLASH          &trans
&trans  &trans         &trans            &trans                &trans                            &trans  &trans  &trans  &trans  &trans  &trans             &trans           &trans        &trans         &trans             &trans
            >;
        };

        colemak-dh {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans     &trans   &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans     &trans   &trans    &trans
&trans  &kp Q   &kp W   &kp F   &kp P   &kp B                                                   &kp J   &kp L   &kp U      &kp Y    &kp SQT   &trans
&trans  &kp A   &kp R   &kp S   &kp T   &kp G                                                   &kp M   &kp N   &kp E      &kp I    &kp O     &trans
&trans  &kp Z   &kp X   &kp C   &kp D   &kp V   &trans  &trans  &trans  &trans  &trans  &trans  &kp K   &kp H   &kp COMMA  &kp DOT  &kp FSLH  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &to 0   &trans  &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };
    };
};
